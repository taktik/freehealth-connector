<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:id="http://www.apb.be/standards/smoa/schema/id/v1" xmlns:ns0="http://www.apb.be/standards/smoa/schema/model/v1" xmlns:smoa="http://www.apb.be/standards/smoa/schema/v1" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="agt ns0 xs fn">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template name="agt:var5_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var4_resultof_map" as="xs:boolean*">
			<xsl:for-each select="$par0/@xsi:type">
				<xsl:sequence select="(fn:resolve-QName(fn:string(.), $par0) = xs:QName('id:NihiiIdType'))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:if test="fn:exists($var4_resultof_map[.])">
			<xsl:sequence select="fn:string($par0/id:nihiiPharmacyNumber)"/>
		</xsl:if>
	</xsl:template>
	<xsl:template name="agt:var7_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var6_resultof_map" as="xs:boolean*">
			<xsl:for-each select="$par0/@xsi:type">
				<xsl:sequence select="(fn:resolve-QName(fn:string(.), $par0) = xs:QName('id:NihiiIdType'))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:if test="fn:exists($var6_resultof_map[.])">
			<xsl:sequence select="fn:string($par0/id:nihiiPharmacyNumber)"/>
		</xsl:if>
	</xsl:template>
	<xsl:template name="agt:var10_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var9_resultof_map" as="xs:boolean*">
			<xsl:for-each select="$par0/@xsi:type">
				<xsl:sequence select="(fn:resolve-QName(fn:string(.), $par0) = xs:QName('id:NihiiIdType'))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:if test="fn:exists($var9_resultof_map[.])">
			<xsl:sequence select="fn:string($par0/id:nihiiPharmacyNumber)"/>
		</xsl:if>
	</xsl:template>
	<xsl:template name="agt:var12_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var11_resultof_map" as="xs:boolean*">
			<xsl:for-each select="$par0/@xsi:type">
				<xsl:sequence select="(fn:resolve-QName(fn:string(.), $par0) = xs:QName('id:NihiiIdType'))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:if test="fn:exists($var11_resultof_map[.])">
			<xsl:sequence select="fn:string($par0/id:nihiiPharmacyNumber)"/>
		</xsl:if>
	</xsl:template>
	<xsl:template match="/">
		<xsl:variable name="var1_singlemessage" as="node()?" select="smoa:single-message"/>
		<xsl:variable name="var2_resultof_map" as="xs:boolean?">
			<xsl:for-each select="$var1_singlemessage">
				<xsl:sequence select="fn:exists(smoa:signed)"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="var3_resultof_any" as="xs:boolean" select="fn:exists($var2_resultof_map[.])"/>
		<statusMessage xmlns="http://www.apb.be/standards/smoa/schema/model/v1" xmlns:code="http://www.apb.be/standards/smoa/schema/code/v1" xmlns:id="http://www.apb.be/standards/smoa/schema/id/v1" xmlns:smoa="http://www.apb.be/standards/smoa/schema/v1" xmlns:CD="http://www.ehealth.fgov.be/standards/kmehr/cd/v1" xmlns:DT="http://www.ehealth.fgov.be/standards/kmehr/dt/v1" xmlns:ID="http://www.ehealth.fgov.be/standards/kmehr/id/v1" xmlns:kmehr="http://www.ehealth.fgov.be/standards/kmehr/schema/v1" xmlns:sig="http://www.w3.org/2000/09/xmldsig#" xmlns:enc="http://www.w3.org/2001/04/xmlenc#">
			<xsl:attribute name="xsi:schemaLocation" select="'http://www.apb.be/standards/smoa/schema/model/v1 xsd/smc-v1/single-message/maindoc/single-message-oa-1.0.xsd'"/>
			<entityId>
				<xsl:attribute name="xsi:type" select="xs:QName('id:EntityIdType')"/>
				<id:version>
					<xsl:sequence select="xs:string(xs:integer(xs:decimal('1')))"/>
				</id:version>
			</entityId>
			<originator>
				<OriginatorType>NIHII</OriginatorType>
				<xsl:variable name="var8_result" as="xs:string?">
					<xsl:choose>
						<xsl:when test="$var3_resultof_any">
							<xsl:for-each select="$var1_singlemessage/smoa:signed/smoa:message/smoa:header/smoa:sender/ns0:refPharmacy">
								<xsl:call-template name="agt:var5_MapTosingle-message-oa-1_0_function">
									<xsl:with-param name="par0" select="ns0:pharmacyId" as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:for-each select="$var1_singlemessage/smoa:unsigned/smoa:header/smoa:sender/ns0:refPharmacy">
								<xsl:call-template name="agt:var7_MapTosingle-message-oa-1_0_function">
									<xsl:with-param name="par0" select="ns0:pharmacyId" as="node()"/>
								</xsl:call-template>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:if test="fn:exists($var8_result)">
					<OriginatorId>
						<xsl:choose>
							<xsl:when test="$var3_resultof_any">
								<xsl:for-each select="$var1_singlemessage/smoa:signed/smoa:message/smoa:header/smoa:sender/ns0:refPharmacy">
									<xsl:call-template name="agt:var10_MapTosingle-message-oa-1_0_function">
										<xsl:with-param name="par0" select="ns0:pharmacyId" as="node()"/>
									</xsl:call-template>
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<xsl:for-each select="$var1_singlemessage/smoa:unsigned/smoa:header/smoa:sender/ns0:refPharmacy">
									<xsl:call-template name="agt:var12_MapTosingle-message-oa-1_0_function">
										<xsl:with-param name="par0" select="ns0:pharmacyId" as="node()"/>
									</xsl:call-template>
								</xsl:for-each>
							</xsl:otherwise>
						</xsl:choose>
					</OriginatorId>
				</xsl:if>
			</originator>
			<messageInformation>
				<DateTime>
					<xsl:sequence select="xs:string(xs:time(fn:current-dateTime()))"/>
				</DateTime>
				<xsl:variable name="var13_result" as="xs:string?">
					<xsl:choose>
						<xsl:when test="$var3_resultof_any">
							<xsl:for-each select="$var1_singlemessage/smoa:signed">
								<xsl:sequence select="fn:string(smoa:message/smoa:header/smoa:messageID)"/>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:for-each select="$var1_singlemessage/smoa:unsigned">
								<xsl:sequence select="fn:string(smoa:header/smoa:messageID)"/>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:if test="fn:exists($var13_result)">
					<MessageId>
						<xsl:choose>
							<xsl:when test="$var3_resultof_any">
								<xsl:for-each select="$var1_singlemessage/smoa:signed">
									<xsl:sequence select="fn:string(smoa:message/smoa:header/smoa:messageID)"/>
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<xsl:for-each select="$var1_singlemessage/smoa:unsigned">
									<xsl:sequence select="fn:string(smoa:header/smoa:messageID)"/>
								</xsl:for-each>
							</xsl:otherwise>
						</xsl:choose>
					</MessageId>
				</xsl:if>
			</messageInformation>
		</statusMessage>
	</xsl:template>
</xsl:stylesheet>
