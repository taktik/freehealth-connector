<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013r2sp2

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:model="http://www.apb.be/standards/smoa/schema/model/v1" xmlns:ns0="http://www.apb.be/standards/smoa/schema/v1" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="agt xs fn">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template name="agt:var8_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<event xmlns="http://www.apb.be/standards/smoa/schema/v1">
			<xsl:attribute name="xsi:type" select="xs:QName('ns0:BvacEventType')"/>
			<xsl:for-each select="$par0/ns0:id">
				<id>
					<xsl:sequence select="fn:string(.)"/>
				</id>
			</xsl:for-each>
			<PharmacyList>
				<xsl:for-each select="$par0/ns0:PharmacyList/model:pharmacy">
					<model:pharmacy>
						<model:identification>
							<xsl:sequence select="(./model:identification/@node(), ./model:identification/node())"/>
						</model:identification>
						<model:identity>
							<xsl:sequence select="(./model:identity/@node(), ./model:identity/node())"/>
						</model:identity>
						<model:bvacList>
							<xsl:for-each select="model:bvacList/model:bvacDocument">
								<model:bvacDocument>
									<model:identification>
										<model:id>
											<xsl:sequence select="fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(fn:concat(fn:substring(fn:concat('0000000', fn:string(model:identification/model:id)), xs:double('1'), xs:double('8')), '-'), fn:substring(fn:concat('0000000', fn:string(model:identification/model:id)), xs:double('8'), xs:double('4'))), '-'), fn:substring(fn:concat('0000000', fn:string(model:identification/model:id)), xs:double('12'), xs:double('4'))), '-'), fn:substring(fn:concat('0000000', fn:string(model:identification/model:id)), xs:double('16'), xs:double('4'))), '-'), fn:substring(fn:concat('0000000', fn:string(model:identification/model:id)), xs:double('20'), xs:double('12')))"/>
										</model:id>
										<model:barCode>
											<xsl:sequence select="(./model:identification/model:barCode/@node(), ./model:identification/model:barCode/node())"/>
										</model:barCode>
									</model:identification>
									<model:currency>
										<xsl:sequence select="fn:string(model:currency)"/>
									</model:currency>
									<model:deliveryDate>
										<xsl:sequence select="xs:string(xs:date(fn:string(model:deliveryDate)))"/>
									</model:deliveryDate>
									<model:patient>
										<xsl:sequence select="(./model:patient/@node(), ./model:patient/node())"/>
									</model:patient>
									<model:doctor>
										<xsl:sequence select="(./model:doctor/@node(), ./model:doctor/node())"/>
									</model:doctor>
									<model:productList>
										<xsl:sequence select="(./model:productList/@node(), ./model:productList/node())"/>
									</model:productList>
									<model:totalAmounts>
										<xsl:sequence select="(./model:totalAmounts/@node(), ./model:totalAmounts/node())"/>
									</model:totalAmounts>
								</model:bvacDocument>
							</xsl:for-each>
						</model:bvacList>
					</model:pharmacy>
				</xsl:for-each>
			</PharmacyList>
		</event>
	</xsl:template>
	<xsl:template name="agt:var13_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<event xmlns="http://www.apb.be/standards/smoa/schema/v1">
			<xsl:attribute name="xsi:type" select="xs:QName('ns0:ContinuedPharmaceuticalCareDossierEvent')"/>
			<xsl:sequence select="($par0/@node())[fn:not(fn:exists(fn:boolean(self::attribute(xsi:type))[.]))]"/>
			<xsl:sequence select="$par0/node()"/>
		</event>
	</xsl:template>
	<xsl:template name="agt:var18_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<event xmlns="http://www.apb.be/standards/smoa/schema/v1">
			<xsl:attribute name="xsi:type" select="xs:QName('ns0:MedicationDeliveryEventType')"/>
			<xsl:sequence select="($par0/@node())[fn:not(fn:exists(fn:boolean(self::attribute(xsi:type))[.]))]"/>
			<xsl:sequence select="$par0/node()"/>
		</event>
	</xsl:template>
	<xsl:template name="agt:var23_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<event xmlns="http://www.apb.be/standards/smoa/schema/v1">
			<xsl:attribute name="xsi:type" select="xs:QName('ns0:MedicationHistoryEvent')"/>
			<xsl:sequence select="($par0/@node())[fn:not(fn:exists(fn:boolean(self::attribute(xsi:type))[.]))]"/>
			<xsl:sequence select="$par0/node()"/>
		</event>
	</xsl:template>
	<xsl:template name="agt:var28_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<event xmlns="http://www.apb.be/standards/smoa/schema/v1">
			<xsl:attribute name="xsi:type" select="xs:QName('ns0:PharmaceuticalCareEventType')"/>
			<xsl:sequence select="($par0/@node())[fn:not(fn:exists(fn:boolean(self::attribute(xsi:type))[.]))]"/>
			<xsl:sequence select="$par0/node()"/>
		</event>
	</xsl:template>
	<xsl:template name="agt:var33_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<event xmlns="http://www.apb.be/standards/smoa/schema/v1">
			<xsl:attribute name="xsi:type" select="xs:QName('ns0:PharmaceuticalPrescriptionEventType')"/>
			<xsl:sequence select="($par0/@node())[fn:not(fn:exists(fn:boolean(self::attribute(xsi:type))[.]))]"/>
			<xsl:sequence select="$par0/node()"/>
		</event>
	</xsl:template>
	<xsl:template name="agt:var38_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<event xmlns="http://www.apb.be/standards/smoa/schema/v1">
			<xsl:attribute name="xsi:type" select="xs:QName('ns0:RegisterExportEventType')"/>
			<xsl:sequence select="($par0/@node())[fn:not(fn:exists(fn:boolean(self::attribute(xsi:type))[.]))]"/>
			<xsl:sequence select="$par0/node()"/>
		</event>
	</xsl:template>
	<xsl:template match="/">
		<single-message xmlns="http://www.apb.be/standards/smoa/schema/v1" xmlns:code="http://www.apb.be/standards/smoa/schema/code/v1" xmlns:id="http://www.apb.be/standards/smoa/schema/id/v1" xmlns:model="http://www.apb.be/standards/smoa/schema/model/v1" xmlns:CD="http://www.ehealth.fgov.be/standards/kmehr/cd/v1" xmlns:DT="http://www.ehealth.fgov.be/standards/kmehr/dt/v1" xmlns:ID="http://www.ehealth.fgov.be/standards/kmehr/id/v1" xmlns:kmehr="http://www.ehealth.fgov.be/standards/kmehr/schema/v1" xmlns:sig="http://www.w3.org/2000/09/xmldsig#" xmlns:enc="http://www.w3.org/2001/04/xmlenc#">
			<xsl:attribute name="xsi:schemaLocation" select="'http://www.apb.be/standards/smoa/schema/v1 C:/dev/workspace-oepe/gfddpp/be-apb-gfddpp-services-smc/src/main/resources/xsd/smc-v2.0.3/single-message/maindoc/single-message-oa-1.0.xsd'"/>
			<xsl:for-each select="ns0:single-message">
				<xsl:for-each select="ns0:unsigned">
					<xsl:variable name="var1_resultof_first" as="node()" select="ns0:header"/>
					<xsl:variable name="var2_resultof_first" as="node()" select="$var1_resultof_first/ns0:sender"/>
					<unsigned>
						<header>
							<version>2.0.2</version>
							<messageCreateDate>
								<xsl:sequence select="xs:string(xs:dateTime(fn:string($var1_resultof_first/ns0:messageCreateDate)))"/>
							</messageCreateDate>
							<messageID>
								<xsl:sequence select="fn:string($var1_resultof_first/ns0:messageID)"/>
							</messageID>
							<sender>
								<xsl:sequence select="($var2_resultof_first/@node(), $var2_resultof_first/node())"/>
							</sender>
						</header>
						<xsl:for-each select="ns0:eventFolder">
							<eventFolder>
								<xsl:for-each select="ns0:events">
									<xsl:variable name="var3_event" as="node()*" select="ns0:event"/>
									<events>
										<xsl:variable name="var7_resultof_filter" as="node()*">
											<xsl:for-each select="$var3_event">
												<xsl:variable name="var5_" as="node()" select="."/>
												<xsl:variable name="var4_resultof_map" as="xs:boolean*">
													<xsl:for-each select="@xsi:type">
														<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var5_) = xs:QName('ns0:BvacEventType'))"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var6_resultof_any" as="xs:boolean" select="fn:exists($var4_resultof_map[.])"/>
												<xsl:if test="$var6_resultof_any">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select="$var7_resultof_filter">
											<xsl:call-template name="agt:var8_MapTosingle-message-oa-1_0_function">
												<xsl:with-param name="par0" select="." as="node()"/>
											</xsl:call-template>
										</xsl:for-each>
										<xsl:variable name="var12_resultof_filter" as="node()*">
											<xsl:for-each select="$var3_event">
												<xsl:variable name="var10_" as="node()" select="."/>
												<xsl:variable name="var9_resultof_map" as="xs:boolean*">
													<xsl:for-each select="@xsi:type">
														<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var10_) = xs:QName('ns0:ContinuedPharmaceuticalCareDossierEvent'))"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var11_resultof_any" as="xs:boolean" select="fn:exists($var9_resultof_map[.])"/>
												<xsl:if test="$var11_resultof_any">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select="$var12_resultof_filter">
											<xsl:call-template name="agt:var13_MapTosingle-message-oa-1_0_function">
												<xsl:with-param name="par0" select="." as="node()"/>
											</xsl:call-template>
										</xsl:for-each>
										<xsl:variable name="var17_resultof_filter" as="node()*">
											<xsl:for-each select="$var3_event">
												<xsl:variable name="var15_" as="node()" select="."/>
												<xsl:variable name="var14_resultof_map" as="xs:boolean*">
													<xsl:for-each select="@xsi:type">
														<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var15_) = xs:QName('ns0:MedicationDeliveryEventType'))"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var16_resultof_any" as="xs:boolean" select="fn:exists($var14_resultof_map[.])"/>
												<xsl:if test="$var16_resultof_any">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select="$var17_resultof_filter">
											<xsl:call-template name="agt:var18_MapTosingle-message-oa-1_0_function">
												<xsl:with-param name="par0" select="." as="node()"/>
											</xsl:call-template>
										</xsl:for-each>
										<xsl:variable name="var22_resultof_filter" as="node()*">
											<xsl:for-each select="$var3_event">
												<xsl:variable name="var20_" as="node()" select="."/>
												<xsl:variable name="var19_resultof_map" as="xs:boolean*">
													<xsl:for-each select="@xsi:type">
														<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var20_) = xs:QName('ns0:MedicationHistoryEvent'))"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var21_resultof_any" as="xs:boolean" select="fn:exists($var19_resultof_map[.])"/>
												<xsl:if test="$var21_resultof_any">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select="$var22_resultof_filter">
											<xsl:call-template name="agt:var23_MapTosingle-message-oa-1_0_function">
												<xsl:with-param name="par0" select="." as="node()"/>
											</xsl:call-template>
										</xsl:for-each>
										<xsl:variable name="var27_resultof_filter" as="node()*">
											<xsl:for-each select="$var3_event">
												<xsl:variable name="var25_" as="node()" select="."/>
												<xsl:variable name="var24_resultof_map" as="xs:boolean*">
													<xsl:for-each select="@xsi:type">
														<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var25_) = xs:QName('ns0:PharmaceuticalCareEventType'))"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var26_resultof_any" as="xs:boolean" select="fn:exists($var24_resultof_map[.])"/>
												<xsl:if test="$var26_resultof_any">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select="$var27_resultof_filter">
											<xsl:call-template name="agt:var28_MapTosingle-message-oa-1_0_function">
												<xsl:with-param name="par0" select="." as="node()"/>
											</xsl:call-template>
										</xsl:for-each>
										<xsl:variable name="var32_resultof_filter" as="node()*">
											<xsl:for-each select="$var3_event">
												<xsl:variable name="var30_" as="node()" select="."/>
												<xsl:variable name="var29_resultof_map" as="xs:boolean*">
													<xsl:for-each select="@xsi:type">
														<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var30_) = xs:QName('ns0:PharmaceuticalPrescriptionEventType'))"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var31_resultof_any" as="xs:boolean" select="fn:exists($var29_resultof_map[.])"/>
												<xsl:if test="$var31_resultof_any">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select="$var32_resultof_filter">
											<xsl:call-template name="agt:var33_MapTosingle-message-oa-1_0_function">
												<xsl:with-param name="par0" select="." as="node()"/>
											</xsl:call-template>
										</xsl:for-each>
										<xsl:variable name="var37_resultof_filter" as="node()*">
											<xsl:for-each select="$var3_event">
												<xsl:variable name="var35_" as="node()" select="."/>
												<xsl:variable name="var34_resultof_map" as="xs:boolean*">
													<xsl:for-each select="@xsi:type">
														<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var35_) = xs:QName('ns0:RegisterExportEventType'))"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var36_resultof_any" as="xs:boolean" select="fn:exists($var34_resultof_map[.])"/>
												<xsl:if test="$var36_resultof_any">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select="$var37_resultof_filter">
											<xsl:call-template name="agt:var38_MapTosingle-message-oa-1_0_function">
												<xsl:with-param name="par0" select="." as="node()"/>
											</xsl:call-template>
										</xsl:for-each>
									</events>
								</xsl:for-each>
								<xsl:for-each select="ns0:entitySpace">
									<entitySpace>
										<xsl:sequence select="(./@node(), ./node())"/>
									</entitySpace>
								</xsl:for-each>
							</eventFolder>
						</xsl:for-each>
					</unsigned>
				</xsl:for-each>
				<xsl:for-each select="ns0:signed">
					<signed>
						<xsl:sequence select="(./@node(), ./node())"/>
					</signed>
				</xsl:for-each>
			</xsl:for-each>
		</single-message>
	</xsl:template>
</xsl:stylesheet>
