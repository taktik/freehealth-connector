<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:id="http://www.apb.be/standards/smoa/schema/id/v1" xmlns:model="http://www.apb.be/standards/smoa/schema/model/v1" xmlns:ns0="http://www.apb.be/standards/smoa/schema/v1" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="agt xs fn">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template name="agt:var11_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var10_resultof_map" as="xs:boolean*">
			<xsl:for-each select="$par0/@xsi:type">
				<xsl:sequence select="(fn:resolve-QName(fn:string(.), $par0) = xs:QName('id:InssIdType'))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:if test="fn:exists($var10_resultof_map[.])">
			<id:id>
				<xsl:sequence select="fn:string($par0/id:id)"/>
			</id:id>
		</xsl:if>
	</xsl:template>
	<xsl:template name="agt:var17_MapTosingle-message-oa-1_0_function">
		<xsl:param name="par0" as="node()"/>
		<xsl:variable name="var16_resultof_map" as="xs:boolean*">
			<xsl:for-each select="$par0/@xsi:type">
				<xsl:sequence select="(fn:resolve-QName(fn:string(.), $par0) = xs:QName('id:InssIdType'))"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:if test="fn:exists($var16_resultof_map[.])">
			<id:id>
				<xsl:sequence select="fn:string($par0/id:id)"/>
			</id:id>
		</xsl:if>
	</xsl:template>
	<xsl:template match="/">
		<single-message xmlns="http://www.apb.be/standards/smoa/schema/v1" xmlns:code="http://www.apb.be/standards/smoa/schema/code/v1" xmlns:id="http://www.apb.be/standards/smoa/schema/id/v1" xmlns:model="http://www.apb.be/standards/smoa/schema/model/v1" xmlns:CD="http://www.ehealth.fgov.be/standards/kmehr/cd/v1" xmlns:DT="http://www.ehealth.fgov.be/standards/kmehr/dt/v1" xmlns:ID="http://www.ehealth.fgov.be/standards/kmehr/id/v1" xmlns:kmehr="http://www.ehealth.fgov.be/standards/kmehr/schema/v1" xmlns:sig="http://www.w3.org/2000/09/xmldsig#" xmlns:enc="http://www.w3.org/2001/04/xmlenc#">
			<xsl:attribute name="xsi:schemaLocation" select="'http://www.apb.be/standards/smoa/schema/v1 C:/Users/s.van.baelen/Dropbox/xsd/smc-v1/single-message/maindoc/single-message-oa-1.0.xsd'"/>
			<xsl:for-each select="ns0:single-message">
				<xsl:for-each select="ns0:unsigned">
					<xsl:variable name="var1_resultof_first" as="node()" select="ns0:header"/>
					<unsigned>
						<header>
							<xsl:sequence select="($var1_resultof_first/@node(), $var1_resultof_first/node())"/>
						</header>
						<xsl:for-each select="ns0:eventFolder">
							<eventFolder>
								<xsl:for-each select="ns0:events">
									<xsl:variable name="var5_resultof_filter" as="node()*">
										<xsl:for-each select="ns0:event">
											<xsl:variable name="var3_" as="node()" select="."/>
											<xsl:variable name="var2_resultof_map" as="xs:boolean*">
												<xsl:for-each select="@xsi:type">
													<xsl:sequence select="(fn:resolve-QName(fn:string(.), $var3_) = xs:QName('ns0:PharmaceuticalCareEventType'))"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:variable name="var4_resultof_any" as="xs:boolean" select="fn:exists($var2_resultof_map[.])"/>
											<xsl:if test="$var4_resultof_any">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<events>
										<event>
											<xsl:attribute name="xsi:type" select="xs:QName('ns0:MedicationHistoryEvent')"/>
											<xsl:for-each select="$var5_resultof_filter">
												<xsl:variable name="var12_cur" as="node()" select="."/>
												<xsl:for-each select="ns0:dispensedForSamePrescription/ns0:product">
													<xsl:variable name="var6_resultof_first" as="node()" select="$var12_cur/ns0:pharmacyId"/>
													<xsl:variable name="var7_resultof_first" as="node()" select="model:description"/>
													<xsl:variable name="var8_resultof_first" as="node()" select="model:dispensation"/>
													<xsl:variable name="var9_resultof_first" as="node()" select="$var12_cur/model:max-Patient/model:identification"/>
													<model:medicationHistoryEntity>
														<model:entityId>
															<xsl:attribute name="xsi:type" select="xs:QName('id:EntityIdType')"/>
															<id:id>
																<xsl:sequence select="fn:string(model:dispensationGUID)"/>
															</id:id>
															<id:version>
																<xsl:sequence select="xs:string(xs:integer(xs:decimal('1')))"/>
															</id:version>
														</model:entityId>
														<xsl:for-each select="$var12_cur/ns0:id">
															<model:sessionID>
																<xsl:sequence select="fn:string(.)"/>
															</model:sessionID>
														</xsl:for-each>
														<model:deliveryDate>
															<xsl:sequence select="xs:string(xs:dateTime(fn:string($var12_cur/ns0:sessionDateTime)))"/>
														</model:deliveryDate>
														<model:pharmacyId>
															<xsl:sequence select="($var6_resultof_first/@node(), $var6_resultof_first/node())"/>
														</model:pharmacyId>
														<model:min-Patient>
															<model:personId>
																<xsl:attribute name="xsi:type" select="xs:QName('id:InssIdType')"/>
																<xsl:call-template name="agt:var11_MapTosingle-message-oa-1_0_function">
																	<xsl:with-param name="par0" select="$var9_resultof_first/model:personId" as="node()"/>
																</xsl:call-template>
															</model:personId>
															<xsl:for-each select="$var9_resultof_first/model:name">
																<model:name>
																	<xsl:sequence select="fn:string(.)"/>
																</model:name>
															</xsl:for-each>
															<model:familyName>
																<xsl:sequence select="fn:string($var9_resultof_first/model:familyName)"/>
															</model:familyName>
														</model:min-Patient>
														<model:product>
															<xsl:attribute name="prescribed" namespace="" select="xs:string(fn:true())"/>
															<xsl:attribute name="onSubstanceName" namespace="" select="xs:string(xs:boolean(fn:string(@onSubstanceName)))"/>
															<model:description>
																<xsl:sequence select="($var7_resultof_first/@node(), $var7_resultof_first/node())"/>
															</model:description>
															<model:dispensation>
																<xsl:sequence select="($var8_resultof_first/@node(), $var8_resultof_first/node())"/>
															</model:dispensation>
														</model:product>
														<xsl:for-each select="$var12_cur/ns0:metaDataList">
															<model:metaDataList>
																<xsl:sequence select="(./@node(), ./node())"/>
															</model:metaDataList>
														</xsl:for-each>
													</model:medicationHistoryEntity>
												</xsl:for-each>
											</xsl:for-each>
											<xsl:for-each select="$var5_resultof_filter">
												<xsl:variable name="var20_cur" as="node()" select="."/>
												<xsl:for-each select="ns0:dispensedWithoutPrescription">
													<xsl:variable name="var13_product" as="node()+" select="ns0:product"/>
													<xsl:variable name="var14_resultof_first" as="node()" select="$var20_cur/ns0:pharmacyId"/>
													<xsl:variable name="var15_resultof_first" as="node()" select="$var20_cur/model:max-Patient/model:identification"/>
													<model:medicationHistoryEntity>
														<model:entityId>
															<xsl:attribute name="xsi:type" select="xs:QName('id:EntityIdType')"/>
															<xsl:for-each select="$var13_product">
																<id:id>
																	<xsl:sequence select="fn:string(model:dispensationGUID)"/>
																</id:id>
															</xsl:for-each>
														</model:entityId>
														<xsl:for-each select="$var20_cur/ns0:id">
															<model:sessionID>
																<xsl:sequence select="fn:string(.)"/>
															</model:sessionID>
														</xsl:for-each>
														<model:deliveryDate>
															<xsl:sequence select="xs:string(xs:dateTime(fn:string($var20_cur/ns0:sessionDateTime)))"/>
														</model:deliveryDate>
														<model:pharmacyId>
															<xsl:sequence select="($var14_resultof_first/@node(), $var14_resultof_first/node())"/>
														</model:pharmacyId>
														<model:min-Patient>
															<model:personId>
																<xsl:attribute name="xsi:type" select="xs:QName('id:InssIdType')"/>
																<xsl:call-template name="agt:var17_MapTosingle-message-oa-1_0_function">
																	<xsl:with-param name="par0" select="$var15_resultof_first/model:personId" as="node()"/>
																</xsl:call-template>
															</model:personId>
															<xsl:for-each select="$var15_resultof_first/model:name">
																<model:name>
																	<xsl:sequence select="fn:string(.)"/>
																</model:name>
															</xsl:for-each>
															<model:familyName>
																<xsl:sequence select="fn:string($var15_resultof_first/model:familyName)"/>
															</model:familyName>
														</model:min-Patient>
														<xsl:for-each select="$var13_product">
															<xsl:variable name="var18_resultof_first" as="node()" select="model:description"/>
															<xsl:variable name="var19_resultof_first" as="node()" select="model:dispensation"/>
															<model:product>
																<xsl:attribute name="prescribed" namespace="" select="xs:string(fn:false())"/>
																<model:description>
																	<xsl:sequence select="($var18_resultof_first/@node(), $var18_resultof_first/node())"/>
																</model:description>
																<model:dispensation>
																	<xsl:sequence select="($var19_resultof_first/@node(), $var19_resultof_first/node())"/>
																</model:dispensation>
															</model:product>
														</xsl:for-each>
														<xsl:for-each select="$var20_cur/ns0:metaDataList">
															<model:metaDataList>
																<xsl:sequence select="(./@node(), ./node())"/>
															</model:metaDataList>
														</xsl:for-each>
													</model:medicationHistoryEntity>
												</xsl:for-each>
											</xsl:for-each>
										</event>
									</events>
								</xsl:for-each>
								<xsl:for-each select="ns0:entitySpace">
									<entitySpace>
										<xsl:sequence select="(./@node(), ./node())"/>
									</entitySpace>
								</xsl:for-each>
							</eventFolder>
						</xsl:for-each>
					</unsigned>
				</xsl:for-each>
<!-- 				<signed>
					<xsl:for-each select="ns0:signed">
						<xsl:variable name="var21_resultof_first" as="node()" select="ns0:signature"/>
						<signature>
							<xsl:sequence select="($var21_resultof_first/@node(), $var21_resultof_first/node())"/>
						</signature>
					</xsl:for-each>
				</signed> -->
			</xsl:for-each>
		</single-message>
	</xsl:template>
</xsl:stylesheet>
